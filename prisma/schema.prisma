//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id                 String         @id() @default(uuid())
  name               String?
  email              String?        @unique()
  pictureUrl         String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  status             UserStatus     @default(VERIFIED)
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime       @default(now())
  dateUpdated        DateTime       @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  roles              Role[]
  tweets             Tweet[]        @relation("user")
  followsAsFollower  Follow[]       @relation("follower")
  followsAsFollowee  Follow[]       @relation("followee")
  likes              Like[]         @relation("user")
  retweets           Retweet[]      @relation("user")
  comments           Comment[]      @relation("user")
  messagesAsSender   Message[]      @relation("sender")
  messagesAsReceiver Message[]      @relation("receiver")
  notifications      Notification[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Tweet {
  id            String         @id() @default(uuid())
  content       String?
  userId        String?
  user          User?          @relation(fields: [userId], references: [id], name: "user")
  likes         Like[]         @relation("tweet")
  retweets      Retweet[]      @relation("tweet")
  comments      Comment[]      @relation("tweet")
  tweetHashtags TweetHashtag[] @relation("tweet")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Like {
  id          String   @id() @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  tweetId     String?
  tweet       Tweet?   @relation(fields: [tweetId], references: [id], name: "tweet")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Retweet {
  id          String   @id() @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  tweetId     String?
  tweet       Tweet?   @relation(fields: [tweetId], references: [id], name: "tweet")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Comment {
  id          String   @id() @default(uuid())
  content     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  tweetId     String?
  tweet       Tweet?   @relation(fields: [tweetId], references: [id], name: "tweet")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TweetHashtag {
  tweetId     String?
  tweet       Tweet?   @relation(fields: [tweetId], references: [id], name: "tweet")
  hashtagId   String?
  hashtag     Hashtag? @relation(fields: [hashtagId], references: [id], name: "hashtag")
  id          String   @id() @default(uuid())
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Hashtag {
  id            String         @id() @default(uuid())
  name          String?
  tweetHashtags TweetHashtag[] @relation("hashtag")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Follow {
  id          String   @id() @default(uuid())
  followerId  String?
  follower    User?    @relation(fields: [followerId], references: [id], name: "follower")
  followeeId  String?
  followee    User?    @relation(fields: [followeeId], references: [id], name: "followee")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id          String   @id() @default(uuid())
  content     String?
  senderId    String?
  sender      User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId  String?
  receiver    User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id          String   @id() @default(uuid())
  type        String?
  referenceId String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
